// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/adryanchiko/x-order/service/order-app/ent/delivery"
	"github.com/adryanchiko/x-order/service/order-app/ent/order"
	"github.com/adryanchiko/x-order/service/order-app/ent/orderitem"
	"github.com/adryanchiko/x-order/service/order-app/ent/predicate"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetPricePerUnit sets the "price_per_unit" field.
func (oiu *OrderItemUpdate) SetPricePerUnit(i int) *OrderItemUpdate {
	oiu.mutation.ResetPricePerUnit()
	oiu.mutation.SetPricePerUnit(i)
	return oiu
}

// AddPricePerUnit adds i to the "price_per_unit" field.
func (oiu *OrderItemUpdate) AddPricePerUnit(i int) *OrderItemUpdate {
	oiu.mutation.AddPricePerUnit(i)
	return oiu
}

// SetQuantity sets the "quantity" field.
func (oiu *OrderItemUpdate) SetQuantity(i int) *OrderItemUpdate {
	oiu.mutation.ResetQuantity()
	oiu.mutation.SetQuantity(i)
	return oiu
}

// AddQuantity adds i to the "quantity" field.
func (oiu *OrderItemUpdate) AddQuantity(i int) *OrderItemUpdate {
	oiu.mutation.AddQuantity(i)
	return oiu
}

// SetProduct sets the "product" field.
func (oiu *OrderItemUpdate) SetProduct(s string) *OrderItemUpdate {
	oiu.mutation.SetProduct(s)
	return oiu
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (oiu *OrderItemUpdate) SetOrderID(id int) *OrderItemUpdate {
	oiu.mutation.SetOrderID(id)
	return oiu
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderID(id *int) *OrderItemUpdate {
	if id != nil {
		oiu = oiu.SetOrderID(*id)
	}
	return oiu
}

// SetOrder sets the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) SetOrder(o *Order) *OrderItemUpdate {
	return oiu.SetOrderID(o.ID)
}

// AddDeliveryIDs adds the "deliveries" edge to the Delivery entity by IDs.
func (oiu *OrderItemUpdate) AddDeliveryIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.AddDeliveryIDs(ids...)
	return oiu
}

// AddDeliveries adds the "deliveries" edges to the Delivery entity.
func (oiu *OrderItemUpdate) AddDeliveries(d ...*Delivery) *OrderItemUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oiu.AddDeliveryIDs(ids...)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) ClearOrder() *OrderItemUpdate {
	oiu.mutation.ClearOrder()
	return oiu
}

// ClearDeliveries clears all "deliveries" edges to the Delivery entity.
func (oiu *OrderItemUpdate) ClearDeliveries() *OrderItemUpdate {
	oiu.mutation.ClearDeliveries()
	return oiu
}

// RemoveDeliveryIDs removes the "deliveries" edge to Delivery entities by IDs.
func (oiu *OrderItemUpdate) RemoveDeliveryIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.RemoveDeliveryIDs(ids...)
	return oiu
}

// RemoveDeliveries removes "deliveries" edges to Delivery entities.
func (oiu *OrderItemUpdate) RemoveDeliveries(d ...*Delivery) *OrderItemUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oiu.RemoveDeliveryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrderItemMutation](ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oiu *OrderItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderItemUpdate {
	oiu.modifiers = append(oiu.modifiers, modifiers...)
	return oiu
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.PricePerUnit(); ok {
		_spec.SetField(orderitem.FieldPricePerUnit, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedPricePerUnit(); ok {
		_spec.AddField(orderitem.FieldPricePerUnit, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedQuantity(); ok {
		_spec.AddField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Product(); ok {
		_spec.SetField(orderitem.FieldProduct, field.TypeString, value)
	}
	if oiu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.DeliveriesTable,
			Columns: []string{orderitem.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: delivery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedDeliveriesIDs(); len(nodes) > 0 && !oiu.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.DeliveriesTable,
			Columns: []string{orderitem.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: delivery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.DeliveriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.DeliveriesTable,
			Columns: []string{orderitem.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: delivery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPricePerUnit sets the "price_per_unit" field.
func (oiuo *OrderItemUpdateOne) SetPricePerUnit(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetPricePerUnit()
	oiuo.mutation.SetPricePerUnit(i)
	return oiuo
}

// AddPricePerUnit adds i to the "price_per_unit" field.
func (oiuo *OrderItemUpdateOne) AddPricePerUnit(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddPricePerUnit(i)
	return oiuo
}

// SetQuantity sets the "quantity" field.
func (oiuo *OrderItemUpdateOne) SetQuantity(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetQuantity()
	oiuo.mutation.SetQuantity(i)
	return oiuo
}

// AddQuantity adds i to the "quantity" field.
func (oiuo *OrderItemUpdateOne) AddQuantity(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddQuantity(i)
	return oiuo
}

// SetProduct sets the "product" field.
func (oiuo *OrderItemUpdateOne) SetProduct(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProduct(s)
	return oiuo
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (oiuo *OrderItemUpdateOne) SetOrderID(id int) *OrderItemUpdateOne {
	oiuo.mutation.SetOrderID(id)
	return oiuo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderID(id *int) *OrderItemUpdateOne {
	if id != nil {
		oiuo = oiuo.SetOrderID(*id)
	}
	return oiuo
}

// SetOrder sets the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) SetOrder(o *Order) *OrderItemUpdateOne {
	return oiuo.SetOrderID(o.ID)
}

// AddDeliveryIDs adds the "deliveries" edge to the Delivery entity by IDs.
func (oiuo *OrderItemUpdateOne) AddDeliveryIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.AddDeliveryIDs(ids...)
	return oiuo
}

// AddDeliveries adds the "deliveries" edges to the Delivery entity.
func (oiuo *OrderItemUpdateOne) AddDeliveries(d ...*Delivery) *OrderItemUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oiuo.AddDeliveryIDs(ids...)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) ClearOrder() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrder()
	return oiuo
}

// ClearDeliveries clears all "deliveries" edges to the Delivery entity.
func (oiuo *OrderItemUpdateOne) ClearDeliveries() *OrderItemUpdateOne {
	oiuo.mutation.ClearDeliveries()
	return oiuo
}

// RemoveDeliveryIDs removes the "deliveries" edge to Delivery entities by IDs.
func (oiuo *OrderItemUpdateOne) RemoveDeliveryIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.RemoveDeliveryIDs(ids...)
	return oiuo
}

// RemoveDeliveries removes "deliveries" edges to Delivery entities.
func (oiuo *OrderItemUpdateOne) RemoveDeliveries(d ...*Delivery) *OrderItemUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oiuo.RemoveDeliveryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	return withHooks[*OrderItem, OrderItemMutation](ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oiuo *OrderItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderItemUpdateOne {
	oiuo.modifiers = append(oiuo.modifiers, modifiers...)
	return oiuo
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.PricePerUnit(); ok {
		_spec.SetField(orderitem.FieldPricePerUnit, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedPricePerUnit(); ok {
		_spec.AddField(orderitem.FieldPricePerUnit, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedQuantity(); ok {
		_spec.AddField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Product(); ok {
		_spec.SetField(orderitem.FieldProduct, field.TypeString, value)
	}
	if oiuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.DeliveriesTable,
			Columns: []string{orderitem.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: delivery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedDeliveriesIDs(); len(nodes) > 0 && !oiuo.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.DeliveriesTable,
			Columns: []string{orderitem.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: delivery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.DeliveriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.DeliveriesTable,
			Columns: []string{orderitem.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: delivery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oiuo.modifiers...)
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
