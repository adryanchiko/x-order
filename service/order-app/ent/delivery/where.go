// Code generated by ent, DO NOT EDIT.

package delivery

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/adryanchiko/x-order/service/order-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldID, id))
}

// DeliveredQuantity applies equality check predicate on the "delivered_quantity" field. It's identical to DeliveredQuantityEQ.
func DeliveredQuantity(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldDeliveredQuantity, v))
}

// DeliveredQuantityEQ applies the EQ predicate on the "delivered_quantity" field.
func DeliveredQuantityEQ(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldDeliveredQuantity, v))
}

// DeliveredQuantityNEQ applies the NEQ predicate on the "delivered_quantity" field.
func DeliveredQuantityNEQ(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldDeliveredQuantity, v))
}

// DeliveredQuantityIn applies the In predicate on the "delivered_quantity" field.
func DeliveredQuantityIn(vs ...int) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldDeliveredQuantity, vs...))
}

// DeliveredQuantityNotIn applies the NotIn predicate on the "delivered_quantity" field.
func DeliveredQuantityNotIn(vs ...int) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldDeliveredQuantity, vs...))
}

// DeliveredQuantityGT applies the GT predicate on the "delivered_quantity" field.
func DeliveredQuantityGT(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldDeliveredQuantity, v))
}

// DeliveredQuantityGTE applies the GTE predicate on the "delivered_quantity" field.
func DeliveredQuantityGTE(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldDeliveredQuantity, v))
}

// DeliveredQuantityLT applies the LT predicate on the "delivered_quantity" field.
func DeliveredQuantityLT(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldDeliveredQuantity, v))
}

// DeliveredQuantityLTE applies the LTE predicate on the "delivered_quantity" field.
func DeliveredQuantityLTE(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldDeliveredQuantity, v))
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		p(s.Not())
	})
}
