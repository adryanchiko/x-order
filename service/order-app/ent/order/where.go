// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/adryanchiko/x-order/service/order-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// OrderName applies equality check predicate on the "order_name" field. It's identical to OrderNameEQ.
func OrderName(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// OrderNameEQ applies the EQ predicate on the "order_name" field.
func OrderNameEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderName, v))
}

// OrderNameNEQ applies the NEQ predicate on the "order_name" field.
func OrderNameNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderName, v))
}

// OrderNameIn applies the In predicate on the "order_name" field.
func OrderNameIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderName, vs...))
}

// OrderNameNotIn applies the NotIn predicate on the "order_name" field.
func OrderNameNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderName, vs...))
}

// OrderNameGT applies the GT predicate on the "order_name" field.
func OrderNameGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderName, v))
}

// OrderNameGTE applies the GTE predicate on the "order_name" field.
func OrderNameGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderName, v))
}

// OrderNameLT applies the LT predicate on the "order_name" field.
func OrderNameLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderName, v))
}

// OrderNameLTE applies the LTE predicate on the "order_name" field.
func OrderNameLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderName, v))
}

// OrderNameContains applies the Contains predicate on the "order_name" field.
func OrderNameContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldOrderName, v))
}

// OrderNameHasPrefix applies the HasPrefix predicate on the "order_name" field.
func OrderNameHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldOrderName, v))
}

// OrderNameHasSuffix applies the HasSuffix predicate on the "order_name" field.
func OrderNameHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldOrderName, v))
}

// OrderNameEqualFold applies the EqualFold predicate on the "order_name" field.
func OrderNameEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldOrderName, v))
}

// OrderNameContainsFold applies the ContainsFold predicate on the "order_name" field.
func OrderNameContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldOrderName, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
