// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/adryanchiko/x-order/service/order-app/ent/delivery"
	"github.com/adryanchiko/x-order/service/order-app/ent/orderitem"
	"github.com/adryanchiko/x-order/service/order-app/ent/predicate"
)

// DeliveryUpdate is the builder for updating Delivery entities.
type DeliveryUpdate struct {
	config
	hooks     []Hook
	mutation  *DeliveryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (du *DeliveryUpdate) Where(ps ...predicate.Delivery) *DeliveryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDeliveredQuantity sets the "delivered_quantity" field.
func (du *DeliveryUpdate) SetDeliveredQuantity(i int) *DeliveryUpdate {
	du.mutation.ResetDeliveredQuantity()
	du.mutation.SetDeliveredQuantity(i)
	return du
}

// AddDeliveredQuantity adds i to the "delivered_quantity" field.
func (du *DeliveryUpdate) AddDeliveredQuantity(i int) *DeliveryUpdate {
	du.mutation.AddDeliveredQuantity(i)
	return du
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (du *DeliveryUpdate) SetOrderItemID(id int) *DeliveryUpdate {
	du.mutation.SetOrderItemID(id)
	return du
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (du *DeliveryUpdate) SetNillableOrderItemID(id *int) *DeliveryUpdate {
	if id != nil {
		du = du.SetOrderItemID(*id)
	}
	return du
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (du *DeliveryUpdate) SetOrderItem(o *OrderItem) *DeliveryUpdate {
	return du.SetOrderItemID(o.ID)
}

// Mutation returns the DeliveryMutation object of the builder.
func (du *DeliveryUpdate) Mutation() *DeliveryMutation {
	return du.mutation
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (du *DeliveryUpdate) ClearOrderItem() *DeliveryUpdate {
	du.mutation.ClearOrderItem()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeliveryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DeliveryMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeliveryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeliveryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeliveryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DeliveryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeliveryUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DeliveryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   delivery.Table,
			Columns: delivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: delivery.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DeliveredQuantity(); ok {
		_spec.SetField(delivery.FieldDeliveredQuantity, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDeliveredQuantity(); ok {
		_spec.AddField(delivery.FieldDeliveredQuantity, field.TypeInt, value)
	}
	if du.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.OrderItemTable,
			Columns: []string{delivery.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.OrderItemTable,
			Columns: []string{delivery.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeliveryUpdateOne is the builder for updating a single Delivery entity.
type DeliveryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeliveryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeliveredQuantity sets the "delivered_quantity" field.
func (duo *DeliveryUpdateOne) SetDeliveredQuantity(i int) *DeliveryUpdateOne {
	duo.mutation.ResetDeliveredQuantity()
	duo.mutation.SetDeliveredQuantity(i)
	return duo
}

// AddDeliveredQuantity adds i to the "delivered_quantity" field.
func (duo *DeliveryUpdateOne) AddDeliveredQuantity(i int) *DeliveryUpdateOne {
	duo.mutation.AddDeliveredQuantity(i)
	return duo
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (duo *DeliveryUpdateOne) SetOrderItemID(id int) *DeliveryUpdateOne {
	duo.mutation.SetOrderItemID(id)
	return duo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableOrderItemID(id *int) *DeliveryUpdateOne {
	if id != nil {
		duo = duo.SetOrderItemID(*id)
	}
	return duo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (duo *DeliveryUpdateOne) SetOrderItem(o *OrderItem) *DeliveryUpdateOne {
	return duo.SetOrderItemID(o.ID)
}

// Mutation returns the DeliveryMutation object of the builder.
func (duo *DeliveryUpdateOne) Mutation() *DeliveryMutation {
	return duo.mutation
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (duo *DeliveryUpdateOne) ClearOrderItem() *DeliveryUpdateOne {
	duo.mutation.ClearOrderItem()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeliveryUpdateOne) Select(field string, fields ...string) *DeliveryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Delivery entity.
func (duo *DeliveryUpdateOne) Save(ctx context.Context) (*Delivery, error) {
	return withHooks[*Delivery, DeliveryMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeliveryUpdateOne) SaveX(ctx context.Context) *Delivery {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeliveryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeliveryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DeliveryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeliveryUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DeliveryUpdateOne) sqlSave(ctx context.Context) (_node *Delivery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   delivery.Table,
			Columns: delivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: delivery.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delivery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delivery.FieldID)
		for _, f := range fields {
			if !delivery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delivery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DeliveredQuantity(); ok {
		_spec.SetField(delivery.FieldDeliveredQuantity, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDeliveredQuantity(); ok {
		_spec.AddField(delivery.FieldDeliveredQuantity, field.TypeInt, value)
	}
	if duo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.OrderItemTable,
			Columns: []string{delivery.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.OrderItemTable,
			Columns: []string{delivery.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Delivery{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
